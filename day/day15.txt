day15
1번문제 사용자로부터 3개의 정수 입력받아 최소값, 최대값, 평균 계산   낮음   5~10분
2번문제 15~30까지 짝수의 합 계산(while문 사용)         낮음   5분
3번문제 별찍기문제   각 5분               낮음   10분
4번문제 학생 성적 관리 프로그램(Person, Student)      중간   15분
   private, 총점, 평균계산, 출력
5번문제 동물원프로그램(추상클래스, 상속, 배열 활용)      중간~높음   20분~25분
6번문제 금융 계좌 관리 프로그램            높음   30분~
   (2개의 인터페이스설계, 2개의 계좌클래스, 송금 및 이자 계산, 메인메소드)
---------------------------------------------------------------------------------------------
12/17/화	DBMS 시험	=> 12/16/월 수업한 내용으로만	DBMS 기초(16~20 DBMS 수업-20 JDBC)
12/24/화 WEB 시험	=> 12/23/월 수업한 내용으로만 HTML 기초(23~31 WEB표준 수업-HTML, CSS, JS)
---------------------------------------------------------------------------------------------
day15
내부클래스 -> 익명클래스 -> 람다식 -> 예외처리 -> API -> 스트림API or Object클래스

1. 내부 클래스(Inner Class)
	클래스 내부에 선언된 클래스를 내부 클래스라고 한다
	내부클래스를 가진 클래스를 외부 클래스라고 한다
	클래스를 구성하는 멤버로 필드, 메소드, 생성자 + 클래스도 가질 수 있다
	만약 B클래스를 A클래스에서만 사용한다면 B클래스를 내부클래스로 만들어서 사용한다
	외부클래스가 메모리에 할당되어야 내부 클래스의 객체화가 가능하기 때문에 B만 별도로 사용하지 못한다
	내부클래스는 외부클래스의 멤버이기 때문에 외부클래스의 멤버를 상속 없이 사용할 수 있다

1) 내부 클래스 사용하는 이유
	내부 클래스에서 외부 클래스의 멤버들을 쉽게 접근할 수 있다
	코드의 복잡성을 줄일 수 있따
	캡슐화 : 내부클래스는 외부클래스 내부에서만 사용가능하기 때문에 내부구현을 숨기고 캡슐화할 수 있다
	코드 가독성, 유지보수성
	+) 웹 개발보다는 앱개발에서 더 많이 사용된다(우리가 배운 이유는 익명클래스 이해하기 위함)

2) 내부클래스의 종류
	선언위치에 따른 분류		선언위치		객체생성조건		파일이름
	인스턴스 내부 클래스		class A{	A객체를 생성해야햐만		A$B.class
				 calsss B{}}	B객체를 생성할 수 있다	A:외부 클래스, B:내부클래스
	정적 내부 클래스 	class A{		A객체를 생성하지 않아도
			static class B{}}	B객체를 생성할 수 있다
	로컬 내부 클래스	class A{		method가 실행할 때만	A$1B
			void method(){		B객체를 생성할 수 있다	A:외부클래스, B:내부클래스
				classB{}}}

2. 익명클래스(Anoymous class)
	이름이 없는 클래스이다
	미구현된 멤버를 구현하여 일회성으로 객체를 생성하기 위해 사용한다
	인터페이스나 추상클래스를 구현할 때 유용하게 사용된다
	익명클래스는 자식 클래스를 만들지 않고도 인터페이스나 추상클래스를 구현할 수 있기 때문에
	코드의 양을 줄일 수 있고, 일회성으로만 사용시에는 불필요한 extends(상속)을 줄일 수 있다
	익명클래스는 클래스내부에서 선언하며, 객체를 생성할 때 바로 구현해주는 방식으로 사용된다

※ 인터페이스는 항상 부모이다.
    즉, 익명클래스는 자동으로 implements되어 부모 자식 관계가 맺어진다
	** 자식 클래스를 객체를 생성하여 부모타입의 변수에 저장되었으니 Up casting 된 것이다
※ 추상클래스도 동일하다
	
3. 람다식(lambda)
1) 함수형 인터페이스(Functional Interface)
	단 하나의 추상 메소드를 가지고 있는 인터페이스
	@FunctionalInterface 어노테이션을 명시해주면 하나의 추상 메소드만 선언할 수 있도록 제한 할 수 있다

2) 람다식 : 익명 메소드
	자바8버전부터 사용가능하다
	메소드를 하나의 식으로 표현한다
	람다식을 매개변수로 전달가능하며, 반환도 가능하다
	함수형 인터페이스는 추상 메소드가 한개만 선언되기 때문에 람다식으로 재정의할 때 이름이 필요없다

3) 람다식 문법
	매개변수 -> 바디
	lambda 패키지의 LambdaTest2클래스 참고

--------------------------------------------------------------------------------------------
1. 2개의 정수를 매개변수로 받아서 곱한 결과를 반환하는 메소드(람다식 이용)
FunctionalInter3 이용하기
- 새로운 함수형 인터페이스(FunctionalInter4)를 만들고
- 2개의 문자열을 매개변수로 전달받는 추상 메소드(combineString)를 선언한다.
- 람다식을 이용하여 2개의 문자열을 연결하여 출력한다.

2. 두 수의 곱을 구하는 프로그램을 만든다.
(1) MultipleInter.java(인터페이스) 에  두 수를 매개변수로 받고 정수값을 반환하는 추상메소드를 만든다.
(2) Main.java(클래스)에 다음과 같은 static 메소드를 선언한다.
- MultipleInter 타입을 반환한다.
- 이름은 claculator
- 매개변수는 boolean타입을 받는다.
매개변수로 true가 들어오면 두수의 곱을 반환하는 람다식을 만들고
false가 들어오면 0을 반환하는 람다식을 만든다.
작성된 람다식을 MultipleInter 타입의 변수에 저장하여 반환하는 메소드를 만든다.

3. 두 문자열을 입력받아 첫 번째 문자열을 두 번째 문자열의 길이만큼 잘라내는 프로그램을 만든다.
ex)
첫 번째 : abcde
두 번째 : 가나다
결과 : de

(1) SubInter.java(인터페이스)에 두 문자열을 매개변수로 받고 문자열을 반환하는 추상 메소드를 만든다.
(2) Main2.java(클래스)에 다음과 같은 static 메소드를 선언한다.
    - 매개변수로 문자열을 전달받는다.
    - 전달받은 문자열이 "F"면 앞에서 자르고 "B"면 뒤에서 자르는 람다식을 만든다.
    작성된 람다식을 SubInter 타입의 변수에 저장하여 반환하는 메소드를 만든다.
















































