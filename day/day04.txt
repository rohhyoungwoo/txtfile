day04
복습 -> 입력메소드 -> 연산자 -> 제어문(조건문)

0. 복습
1) JAVA의 개발 배경
	sun 마이크로 시스템사의 제임스 고슬링 팀에 개발
	객체 지향 언어
	C언어와 C++언어를 토대로 개발됨

2) JAVA 언어의 특징
	다양한 운영체제에 의해 이식성이 높다 -JVM
	자료 중심의 객체지향언어(중요한 자료를 클래스로 형성해서 만듦)(아이언맨, 헐크)

3) 프로그램 개발 순서
	일반프로그램 : 소스파일 --컴파일--> 실행파일(.exe) --실행-->컴퓨터
	자바프로그램 : 소스파일 --컴파일--> 실행파일(바이트코드).class --실행--> 컴퓨터
					(중간단계)
	소스파일에서 컴파일된 바이트 코드를 다시 기계어 코드로 변환하는 작업이 필요함
	이 작업을 JVM이 한다!!

4) JVM, JRE, JDK
	JVM : JAVA로 만든 프로그램을 실행시켜준다. 메모리 관리(Stack, Heap, Method + 2개영역으로 나뉨)
	JRE : JVM을 포함한다. JVM을 실행할 때 필요한 라이브러리 파일 등을 가지고 있따
	JDK : JRE를 포함한다. JRE 외에 개발에 필요한 도구들을 가지고 있다(컴파일러 등)
 
5) 변수(Variable)
	값을 저장하는 저장공간
	반복되는 값을 관리하기 위해(재사용)
	값에 의미를 부여하기 위해(값에 이름을 붙여준다)
	프로그램 가독성, 유지보수성을 높이기 위해
	
	자료형 변수명;	-선언
	변수명 = 값;	-값
	자료형 변수명 = 값;	-초기화까지 동시에 한다	int number = 10; //정수형 4byte number 변수에 10이라는 정수형 값을 대입한다

6) 자료형(DataType)
	정수형	int	4byte
		long	8byte
	실수형	double	8byte	-정밀도 때문에 기본형, 15자리 
		float	4byte	6자리
	논리형	boolean	1byte
	문자형	char	2byte	''
	문자열	String 	?	""

7) 형변환(Type Casting)
	강제형변환				- 값의 손실
		(자료형) 값
	자동형변환
		작은 값을 큰 저장공간에 저장할 때
		정수 + 정수 => 정수
		정수 + 실수 => 실수
		char에서 int로 형변환		int num = 'a'; = 97
	다른 자료형을 문자열로 변환
		+ ""(빈문자열)		5 + "입니다"
	문자열을 다른 자료형으로 변환
		클래스타입을 이용
		"10" => Integer.parseInt("10")
		"abc" => "abc".charAt(1) 	-인덱스번호 0~

8) 이스케이프 문자
	문자열 안에서 작성한다
	\n, \t, \", \', \\

9) 출력메소드
	print()		=> 소괄호 안에 있는 값을 콘솔창에 출력하고 줄바꿈되지 않는다
	pringln()	=> 소괄호 안에 있는 값을 콘솔창에 출력하고 줄바꿈이 된다
	printf()	=> 서식문자의 형식에 맞게 값을 콘솔창에 출력하고 줄바꿈이 되지 않는다

	자료형	형식지정자
	int	%d		10진수 정수
		%o		8진수 정수
		%x		16진수 정수
	double	%f		실수(소수점이하 6자리까지 출력)
	char	%c		문자
	String	%s(논리형도포함)	문자열

10) 주소값
	메모리(RAM)에 저장공간이 할당되면 고유한 값인 주소값이 부여된다
	값은 변경될 수 있으나 중복은 없다
	- RAM(Random Access Memory)
-----------------------------------------------------------------------
1. 입력메소드
1) 함수
	기능
	이름 뒤에 ()가 온다

2) 메소드
	함수와 같이 기능을 의미한다
	java에서 모든 함수는 크래스 내부에 만들어지므로 메소드라고 말한다
	
	어떤 메소드를 사용하기 위해서는 그 메소드가 어떤 클래스에 존재하는지 알아야한다
	System.out.println()	. : ~안에, ~의

3) Scanner 클래스(입력클래스)
	입력 메소드를 이욯하기 위해서는 반드시 입력 클래스를 불러와야한다(아래 1줄이 필요하다)
	입력 클래스가 위치한 패키지가 다르기 때문에 패키지를 불러와야한다(import java.util.Scanner)

	Scanner sc 		= 	new Scanner(System.in);
	자료형	변수명	     대입연산자		값

4) 입력메소드
	Scanner 클래스 내부에 입력 메소드가 만들어져 있다
	next()	: 입력 받은 값을 String타입으로 돌려준다
		(입력받은 값을 변수에 저장시에는 String 변수를 만들어야한다)
		입력한 값을 띄어쓰기, 엔터로 구분하고 분리한다
		임시 저장공간에서 엔터를 소모하지 않는다
		- 첫번째 문자열을 첫번째 next()에 담고 두번째 문자열은 두번째 next()에 담는다		

		노 형우
		String name1 = sc.next();
		String name2 = sc.next();
		syso(name1);	//노
		syso(name2);	//형우
		
		띄어쓰기는 아직 버퍼에 남아있다
	
	nextLine() : 입력받은 값을 String타입으로 돌려준다
		띄어쓰기를 포함한 한 줄 전체를 입력받는다
		엔터 이전까지의 값을 가져온다
		엔터를 임시저장공간에서 지워준다(소모한다)

	nextInt()	: 입력받은 값을 int타입으로 돌려준다
		입력한 값을 띄어쓰기, 엔터로 구분하고 분리한다
	nextDouble()	: 입력받은 값을 double타입으로 돌려준다
		입력한 값을 띄어쓰기, 엔터로 구분하고 분리한다

	=> next(), nextInt(), nextDouble()을 사용하면 엔터값이 남아 있게 되는데
	다음에 nextLine()을 사용하게 되면 남아있던 엔터를 소모하여 입력을 받지않게 된다
	따라서 입력받기 전에 nextLine()을 사용하여 엔터를 소모시켜야한다

+) 각 자료형의 기본값(초기화 시킬 때 주로 사용)
	int : 0
	double : 0.0
	boolean : false
	char : ' '
	String : "", null

2. 연산자
	기능이 있는 특수문자

1) 연산자의 우선순위와 결합방식
	하나의 수식에 여러개의 연산자를 사용하면 어떤 연산이 먼저 되는 지를 구분한다

	최우선
	단항
	산술
	쉬프트
	관계
	논리
	삼항
	대입(<-)

2) 결합성
	하나의 수식에 동일한 연산자가 여러개 사용되면 알맞은 방향으로 결합되어 연산되는 성질

3. 산술연산자
	+	정수 + 정수 => 정수
		실수 + 실수 => 실수
		정수 + 실수 => 실수
		문자열 + 문자열 => 문자열연결
	-	정수 - 정수 => 정수
		실수 - 실수 => 실수
		정수 - 실수 => 실수
	*	정수 * 정수 => 정수
		실수 * 실수 => 실수
		정수 * 실수 => 실수
	/	정수 / 정수 => 정수(소수점 이하는 버림)
		실수 / 실수 => 실수
		정수 / 실수 => 실수
	%	정수 % 정수 => 정수(나눗셈의 나머지)
		실수 % 실수 => 실수(나눗셈의 나머지)

4) 복합대입 연산자
	+=, -=, *=, /= ,%=
	
	int num = 10;
	num = num + 2;	// num += 2;
	num = num + 3;	// num += 3;

5) 증감연산자
	++, --
	전위형	: 해당 라인부터 바로 적용
		++num, --num
		ex) int num = 1;
		syso(num);	//1
		syso(++num);	//2

	후위형	: 다음라인부터 적용(증감연산자가 끝난 시점부터 적용)
		ex) int num = 1;
		syso(num);	//1
		syso(num++);	//1
		syso(num);	//2

	증감 연산자는 피연사자를 1씩 증가 또는 1씩 감소시킬 때 사용하는 연산자
	피연산자가 1개 뿐인 단항 연산자이다
	증감연산자는 해당 연산자가 피연산자의 어느쪽에 우치하는 가에 따라 연산의 결과가 달라진게 된다

	++x	먼저 피연산자의 값을 1증가시킨 후에 해당 연산을 진행한다
	x++	먼저 해당 연산을 수행하고 나서 피연산자의 값을 1증가시킨다
	--x	먼저 피연산자의 값을 1감소시킨 후에 해당 연산을 진행한다
	x--	먼저 해당 연산을 수행하고 나서 피연산자의 값을 1감소시킨다

[문제]
	int num1 = 7, num2 = 7;
	int result1 = 0, result2 = 0;

	result1 = --num1 + 4;	//--num1은 전위감소연산자 num1의 값이 먼저 감소한 뒤에 연산에 사용된다
		//num1의 값 : 7 -> 6
		//계산 : 6 + 4의 결과값이 result1 변수에 대입, 결과 10
	result2 = num2-- + 4;	// num--는 후위감소연산자 num2의 현재 값이 연산에 사용된 후 감소된다
		//num2의 값 : 7
		//계산 : 7 + 4의 결과값이 result2 변수에 대입, 결과 11
		//그 후 num2의 값 : 7 -> 6


6) 관계연산자(비교연산자)
	조건식	결과가 참, 거짓 들 중 하나가 나오는 식
		결과가 boolean 타입으로 나온다

	>, <	: 초과, 미만
	>=, <=	: 이상, 이하
	==	: 같다
	!=	: 같지 않다

	a > b	a가 b보다 크니? 맞으면 true, 틀리면 false
	a < b	a가 b보다 크니? 맞으면 true, 틀리면 false
`	a >= b	a가 b보다 크거나 같니? 맞으면 true, 틀리면 false
	a <= b	a가 b보다 작거나 같니? 맞으면 true, 틀리면 flase
	a == b	a가 b랑 같니? 맞으면 true, 틀리면 false
	a != b	a가 b랑 같지 않니? 맞으면 true, 틀리면 false

7) 논리연산자
	and	: 두 조건식 모두 참이면 참
	or	: 두 조건식 중 하나라도 참이면 참
	not	: 조건식이 참이면 거짓으로, 거짓이면 참으로 변경
--------------------------------------------------------------------------------------
복습
	입력클래스
		import java.util.Scanner

		Scanner sc = new Scanner(System.in); 
		//자동import 단축키 : ctrl + shift + o

	입력메소드		
		next(),nextInt(), nextDouble(), nextLine()

	sc.close()

int num = 1;
         num++;   //1
         num;   //2
         ++num;   //3
         num;   //3
         ++num + 5;   //9
         num;      //4
         num-- + 1;   //5
         num;      //3
         num = 3;
         num++ + ++num * 2;   //
         
         int num = 3;
         syso(num);   //3
         result = num++ + ++num * 2;
         현재 num++ => 3 사용후 증가 4
         현재 ++num => 5
         
         ++num * 2 -> 5 * 2 = 10
         num++ + 10 -> 3 + 10 = 13

	연산자 우선순위
		최우선	. ()
		단항	+, -, 증감연산자(++, --)	
		산	+, -, *, /, %
		쉬	<<, >>
		관계	>, <, >=< <=< ==, !=
		논리	and(&&), or(||)m not(!)
		삼
		대	=

	복합대입연산자, 누적연산자
		+=, -=, *=, /=, %=

-------------------------------------------------------------------------------
package task;

public class Task01 {
   public static void main(String[] args) {
      //1. 100000원이 넘는 금액을 입력받아 5만원, 1만원, 5천원, 1천원 단위로 나누어 출력하기
      
      
      //2. 키와 몸무게를 입력받아 BMI를 계산하기
      // 공식 : 몸무게 / (키 * 키)
      
      
      //3. 밑변과 높이를 입력받아 삼각형의 높이 계산하기
      //공식 : 0.5 * 밑변 * 높이
      
      
      //4. 두 정수를 입력받아 0보다 큰지 출력하기(true or false로 출력할 것)
      
      
      //5. 사용자에게 물건의 개수와 가격을 입력받아 총액 계산하기
      // 물건의 개수 : 3
      // 물건의 개당 가격 : 15000
      // 총액 : 금액원
      
      
      //6. 두 자리수 정수를 한 개 입력받아 각 자리의 숫자를 더하여 출력하기(각 자리수의 합)
      
      
      //7. 정수를 입력받아 양수이면서 짝수인지 확인하여 결과 출력하기
      //true or false
      
      //8. 두 숫자를 입력받아 첫번째 입력받은 숫자가 두번째 숫자보다 크거나 같은지 여부를 출력하기
      //ture or false
      
      //9. 두 숫자를 입력받아 한 숫자만 양수인지 여부 출력하기
      //true or false
      
//10. 연도를 입력받아 윤년인지 아닌지 출력하기(2024년, 2025년도로 확인할 것)
//true or false => ture이면 0000년은 윤년입니다로 출력할 것, false이면 0000년은 윤년이 아닙니다로 출력
// 윤년 계산 : 연도가 4로 나누어 떨어지고 100으로 나누어떨어지지 않거나 400으로 나누어떨어져야한다
      
   }
}



















