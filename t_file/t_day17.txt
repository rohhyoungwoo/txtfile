day17
교재정리(복습) -> Object 클래스 -> Wrapper 클래스 -> 컬렉션 프레임워크
※ 오늘은 컬렉션 프레임워크 다 진행 후 수업 종료
--------------------------------------------------------------------------------
1. Object 클래스
	모든 클래스의 최상위 부모 클래스
	
	.toString()	객체 문자 정보를 리턴
	.equals()	객체의 번지를 비교하고 결과 리턴
	.hashCode()	객체의 해시코드를 리턴

1) toString()
	Object의 toString()은 참조값을 문자열 형태로 출력한다
	참조변수를 print()등의 출력 메소드로 출력하면 항상 toString()이 사용된다 => 참조값이 나오는 이유
	toString()을 통해 출력되는 문자열을 바꾸고 싶다면 재정의해서 사용한다

	
Object의 toString()

public String toString() {

return getClass().getName() + "@" + Integer.toHexString(hashCode());

}

Excepiton의 toString()

	    public String toString() {
	        String s = getClass().getName();
	        String message = getLocalizedMessage();
	        return (message != null) ? (s + ": " + message) : s;
	    }


	주소값 : hashCode()	-> 메모리상의 주소값을 특정 알고리즘을 통해 정수값으로 변환한다
		toHexString(hashCode()); -> 16진수로 변환된(해쉬코드)값. 해쉬값이라고 한다	


2) equals()
	Object의 equals()는 사실 관계연산자(==) 와 같다
	(주소값 비교) String의 equals()는 재정의 되어 값을 비교한다 => 문자열 비교는 equals()를 사용한다
	우리가 만든 클래스 객체를 비교하고 싶다면 비교기준을 재정의해서 사용할 수 있다

	equals를 재정의하면 반드시 hashCode()도 재정의한다

Object 클래스의 equals()
	public boolean equals(Object obj) {
		return (this == obj);
	}	

3) hashCode()
	Object의 hashCode()는 객체의 주소값을 특정 알고리즘을 거쳐서 정수값으로 반환한다
	자바에서 equals()를 재정의하면 hashCode()도 재정의하도록 권장한다
	(두 객체의 equals()가 true라면 hashCode()도 동일하게 나오도록 재정의하는 것을 권장한다)

	객체 해시코드는 객체를 식별하는 정수를 의미
	객체의 메모리 번지를 이용해서 해시코드를 생성하기 때문에 객체마다 다른 정수값을 리턴한다
	equals() 메소드의 용도와 비슷한데 두 객체가 동등한지 비교할 때 주로 사용한다

2. Wrapper Class
	기본자료형들의 클래스 타입
	
	기본타입(원시타입)	wrapper클래스(참조형)
	short		Short
	byte		Byte
	int		Integer
	long		Long
	double		Double
	float		Float
	boolean		Boolean
	char		Character
	
Q. 메모리를 더 많이 차지하는 Wraaper 클래스는 언제 사용할까?
	기본형이 객체로 취급해야하는 경우들이 있는데 이 때 Wrapper Class를 사용한다
	- 매개변수로 객체가 요구될 때
	- 기본형 값이 아닌 객체로 저장해야할 때
	- 객체간의 비교가 필요할 때

1) 박싱과 언박싱
	boxing : 기본 타입의 값을 Wrapper 클래스의 객체로 변환
	unboxing : Wrapper 클래스 객체에서 기본 타입의 값으로 변환

	//boxing(예전방법)
	클래스타입 객체 = new 클래스타입(일반타입의 값);
	//boxing
	클래스타입 참조변수 = 클래스타입.valueOf(일반타입의 값);
	//unboxing
	일반타입 변수 = 객체.000Value();

	//4버전이상부터는 auto를 지원한다
	클래스타입 객체 = 일반타입 값; //auto boxing
	일반타입 변수 = 객체;	//auto unboxing

2) Wrapper Class를 사용하는 이유
	원시타입(일반타입)을 박싱하면 다양한 메소드를 제공받을 수 있다
	여러 일반 타입을 하나의 타입으로 묶기 위해서는 반드시 클래스 타입(Wrapper Class)로 사용해야하고
	이 때 박싱을 해야한다
	클래스 타입이 갖고 있는 이점이 많으며 메소드의 매개변수로 클래스 타입을 받는 경우 기본 자료형을 넘겨줄 수
	없으므로 박싱을 해줘야한다

3. String 메소드
	charAt()	문자열에서 해당 인덱스 번호의 문자를 char타입으로 반환
			"Hello".charAt(0);	=> H
	length()	문자열의 길이를 반환
	indexOf()	특정 문자나 문자열을 앞에서부터 찾아 처음으로 찾게되는 인덱스를 반환
			없을 경우 -1을 반환
	split()		구분문자를 기준으로 문자열을 잘라 배열에 담아 반환
	strip()		문자열 앞뒤의 공백 제거
	substring(start, end)	시작 인덱스 번호 ~ 끝 인덱스 번호 -1까지의 문자열을 반환
	+ ..

4. 컬렉션 프레임워크
	자료구조 : 많은 양의 데이터를 효율적으로 관리(추가, 검색, 조회, 삭제, 수정)하기 위해
		데이터를 저장하는 방법
		의미없는 데이터를 하나의 정보로 만들어주는 알고리즘의 집합(수집한 데이터를 저장하는 방법)
	알고리즘 : 어떤 문제가 발생했을 때 해결할 수 있는 절차 혹은 순서

	자바 컬레션 프레임워크(JCF : Java Collection Framework) : 자료구조
		많은 데이터를 쉽고 효과적으로 관리할 수 있는 표준화된 방법을 제공하는 클래스들의 집합
	

1) 인터페이스 분류 
인터페이스분류		특징			구현클래스
Collection	List	순서를 유지하고 저장		Vector, ArrayList, LinkedList
			중복 저장 가능
		Set	순서를 유지하지 않고 저장	HashSet, TreeSet
			중복 저장 불가능
Map			키와 값으로 구성된 엔트리 저장	HashMap, Hashtable, TreeMap, Properties
			키는 중복 저장 불가능
	
5. List인터페이스 extends Collection
	데이터의 순서를 보장
	중복된 값을 허용
	List 컬렉션은 객체의 번지를 저장한다

1) List 구현 클래스
	Vector : 용량관리, 보안성강화, 처리량 감소
	ArrayList : 배열과 동일하게 인덱스로 데이터를 관리한다
		컬렉션 클래스 중 실무에서 가장 많이 사용되는 클래스이다 
		추가, 삭제는 느리지만 탐색이 상대적으로 빠르다
	LinkedList : 추가, 삭제는 빠르지만 탐색이 상대적으로 느리다
	
2) 제네릭(Generic)
	결정되지 않은 타입을 파라미터로 처리하고 실제 사용할 때 구체적인 타입으로 대체시키는 기능
	클래스명<T> 변수 = new 생성자<T>();
	변수를 선언할 때 동일한 타입으로 호출하고 싶다면 생성자 호출시에 타입을 명시하지 않고 <>만 붙일 수 있다
	클래스명<T> 변수 = new 생성자<>();
	
	Iterable<T> 자바의 제네릭 프로그래밍을 지원하는 인터페이스 중하나이다
		자바 컬렉션 프레임워크에서 많이 사용되며 컬렉션 내부의 요소들을 반복(iterate)하고자할 때 사용한다

	제네릭을 사용하는 이유
	(1) 제네릭을 사용하지 않는다면 필드의 타입별로 클래스를 만들어야한다
	(2) 제네릭 대신 Object 타입을 사용한다면 다운캐스팅을 해야한다
	(3) 제네릭은 타입을 제한할 수 있다(Object는 모든 타입을 다 받을 수 있기 때문)

3) 배열과 ArrayList의 차이
	배열은 길이에 제한을 두어야할 때 자주 사용되고
	ArrayList는 몇개의 데이터가 들어올지 알 수 없을 때 사용한다

4) ArrayList 메소드
	int size()		리스트의 요소 개수를 반환
	boolean isEmpty()	리스트가 비어있는지 여부 반환	
	boolean contains(Object o) 주어진 객체가 리스트에 포함되어 있는지 여부 반환
	E get(int index)	주어진 인덱스 위치에 있는 요소를 반환
	E set(int index, E element) 주이진 인덱스 위치의 요소를 다른 요소로 대체
	boolean add(E e)	리스트에 요소를 추가
	boolean remove(Object o) 리스트에서 지정된 객체 제거
	void clear()		리스트의 모든 요소를 제거(모두 비우기)
	int indexOf(Object o) 	주어진 객체의 첫번째 등장 인덱스를 반환
	int lastIndexOf(Object o) 주어진 객체의 마지막 등장 인덱스를 반환
=========================================================================================
몰라도 됨
+) 제네릭과 관련된 고급 문법으로 특정 조건을 만족하는 타입만 허용하도록 제한함
public static <T extends Comparable<? super T>> void sort(List<T> list)
	<T> : 제네릭 타입의 매개변수, 메소드를 호출할 때 구체적인 타입으로 치환된다
	T extends Comparable<? super T> : T는 Comparable 인터페이스를 구현하는 클래스여야한다
	T는 Comparable 인터페이스를 구현한다
	Comparable의 타입 매개변수는 T 또는 T의 상위 클래스를 허용한다
	? super T : 제네릭 타입의 상속 관계를 고려하여 T와 상위 타입간의 비교도 허용하기 위해서 사용한다
=========================================================================================
5) Comparator는 자바에서 객체를 비교하고 정렬하는데 사용되는 인터페이스
	compare(T o1, T o2)	: 두 개의 객체 o1과 o2를 비교하는 메소드
		o1이 o2보다 작으면 음수를, o1이 o2보다 크면 양수를, 두 객체가 같으면 0을 반환해야한다
		두 객체를 비교하는 비교 규칙을 정의할 수 있다	

6. Set : 집합
	데이터의 순서를 보장하지 않는다
	데이터의 중복을 허용하지 않는다

1) 구현 클래스
	HashSet
	Set 인터페이스를 구현한 가장 대표적인 클래스
	중복되는 값을 저장하면 무시한다
	인덱스가 존재하지 않아 순서를 보장하지 않으며 ArrayList 나 배열처럼 값을 가져오는 것이 불가능하다
	hashCode()가 반환하는 해시코드를 이용하여 데이터를 처리하며 속도가 상대적으로 빠르다
	위의 특징으로 인해 값의 존재여부를 파악할 때 사용하기 좋다

2) Iterator : 반복자
	컬렉션에 저장된 데이터를 순회하고 가져오기 위한 인터페이스
	Iterator는 컬렉션에 저장된 데이터들을 컬렉션의 종류와 상관없이 동일한 방식으로 가져오기 위한 인터페이스(타입)
	값을 가져올 때 커서(cursor)를 이용하여 컬렉션을 순회하며 다음 값을 가리키고 값을 가져올 수 있다
	어떤 자료구조든 Iterator로 변환하면 Iterator만의 방식으로 순서를 만들고 값을 가져올 수 있다
	
	Set<E> set1 = new HashSet<>();
	Iterator<E> iter = set1.iterator();

- iterator()
	ArrayList, HashSet 등의 컬렉션 객체를 Iterator 타입으로 변환할 때 사용하는 메소드
- hasNext()
	다음 값의 유무를 검사하여 boolean타입으로 반환한다
- next()
	다음값을 가져온다. 아무 값도 없다면 예외가 발생한다

3) HashSet 주의사항
	HashCode()를 사용하는 HashSet에 객체를 저장할 때 equals()를 재정의 했다면 반드시 hashCode()도 재정의
	해야한다
	일관성과 검색 효율성이 저하되는 것을 방지하기 위함이다
	- 일관성 : equals() 메소드로 두 객체를 동일하다고 판단한 경우, 두 객체의 hashCode()메소드는 항상 같은값을
		반환해야한다. 이렇게 해야 HashSet이 동일한 객체를 중복으로 저장하지 않고 올바르게 동작한다
	- 검색 효율성 : 객체를 검색할 때 hashCode()값을 사용하여 저장위치를 찾아가므로 hashCode()메소드를 재정의
		하지 않으면 HashSet의 검색성능이 저하될 수 있다

















