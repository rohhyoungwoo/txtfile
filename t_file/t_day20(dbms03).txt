day20(dbms 3일차)
복습 -> DDL -> 무결성 -> 모델링 -> 정규화 -> 시퀀스

0. 복습
1) SQL문 주요 특징
	인터프리터 언어
	대소문자 구분하지 않는다
	
2) 자료형
	숫자	NUMBER
	문자	CHAR, VARCHAR2
	날짜	DATE, TIMESTAMP
	대용량	BLOB, CLOB

3) SQL문의 종류
	DDL : 데이터 정의 언어 - 테이블 조작, 제어 관련 쿼리문
	DML : 데이터 조작 언어 - 데이터 조작하는 쿼리문
	DCL : 데이터 제어 언어
	TCL : 트랜잭션 제어 언어

----------------------------------------------------------------------

TBL_USER	
회원번호(PK)	이름	나이	아이디(UK)
1		짱구	5	JG
2		철수	5	CS
3		유리	5	YL
4		치타	6	CT

TBL_BOARD
게시글번호(PK)	제목	내용		회원번호(FK)
1		춥다	너무 추워요	3
2		춥다	너무 추워요	2

1. 제약조건
1) PRIMARY KEY(PK)
	고유한 값이며 각 행의 구분점으로 사용된다
	중복이 없고 NULL값을 허용하지 않는다

2) FOREIGN KEY(FK)
	다른 테이블의 PK를 사용하며 중복이 가능하다
	보통 테이블끼리 관계를 맺을 때 사용한다
	NULL값을 허용하지만 좋은 상황은 아니다
	
3) UNIQUE KEY(UK)
	NULL은 허용하지만 중복을 허용하지 않는다

2. DDL(Data Definition Language) : 데이터 정의 언어
	테이블 조작, 제어 관련 쿼리문

1) CREATE : 테이블 생성
	CREATE TABLE 테이블명(
		컬럼명 자료형(용량) [제약조건],
		...
	);

2) DROP : 테이블 삭제
	DROP TABLE 테이블명;

3) ALTER : 테이블 수정
	ALTER TABEL 테이블명
	- 테이블명 수정 : RENAME TO 새로운 테이블명;
	- 컬럼명 수정   : RENAME COLUMN 기존 컬럼명 TO 새로운 컬럼명;
	- 컬럼 타입 수정 : MODIFY(기존 컬럼명 자료형(용량));
	- 컬럼 추가 : ADD(새로운컬럼명 자료형(용량));
	- 컬럼 삭제 : DROP COLUMN 기존 컬럼명;
	- 제약조건 추가 : ADD CONSTRAINT 제약조건이름 PRIMARY KEY(현재테이블의 컬럼명)
				/FOREIGN KEY(현재테이블의 컬럼명) REFERENCES 상위테이블명(컬럼명);
	- 제약조건 삭제 : DROP CONSTRAINT 제약조건이름;

4) TRUNCATE : 테이블 내용 전체 삭제(테이블이 아닌 데이터 삭제!!)
	TRUNCATE TABLE 테이블명;

+) TRUNCATE와 DELETE의 차이
	DELETE : DML, 테이블의 모든 데이터 삭제, 테이블의 용량은 감소하지 않음, rollback 가능, where 사용가능
	TRUNCATE : DDL, 테이블의 모든 데이터 삭제, 테이블의 용량 초기화, rollback 불가능, where 사용불가능

5) 제약조건 정의 방법
	- 컬럼 레벨 정의 : 하나의 컬럼을 정의하면서 같이 정의
	- 테이블 레벨 정의 : CREATE 쿼리 마지막에 정의
	- NOT NULL 제약조건은 컬럼 레벨 정의만 가능
	- 테이블명_컬럼명_제약조건명 또는 시스템구분_테이블명_제약조건명

6) 데이터베이스 명명 규칙(테이블명, 컬럼명 작성시 주의사항)
	이름은 중복 불가
	문자로 시작해야한다
	특수문자는 _, $, # 사용 가능
	예약어는 사용 불가
	공백 사용 불가
	최대 30글자까지 가능

2. 모델링
	데이터베이스 시스템에서 데이터의 구조와 관계를 설계하는 것을 의미
	
1) 모델링 종류
	개념적 모델링 : 엔티티 도출, 비즈니스 요구사항 분석
	논리적 모델링 : 데이터의 속성, 키, 엔티티들의 관계 정의
	물리적 모델링 : 엔티티를 데이터베이스의 테이블로 구현, 테이블/인덱스/키/제약조건 등을 정의

2) 데이터의 무결성
	데이터의 정확성, 일관성, 유효성을 유지하여 결함없는 데이터를 유지 및 사용하는 것
	
	- 정확성 : 데이터는 애매하지 않아야한다
	- 일관성 : 각 사용자가 일관된 데이터를 볼 수 있도록 해야한다
	- 유효성 : 데이터가 실제 존재하는 데이터야한다

3) 무결성의 종류
	- 개체 무결성	: 모든 테이블이 PK로 선택된 컬럼을 가져야한다
	- 참조 무결성	: 두 테이블의 데이터가 항상 일관된 값을 가지도록 유지하는 것(부모테이블의 PK-자식테이블의 FK 일치)
	- 도메인 무결성	: 컬럼의 타입, NULL 값 허용 등에 대한 사항을 정의하고 올바른 데이터가 입력되었는지를 확인하는 것

4) 키(key)
	데이터 베이스 내의 레코드(행)를 고유하게 식별하거나 검색하는데 사용되는 하나 이상의 속성(열)의 조합
	- 모델링에서 사용 : 기본키, 외래키, 후보키, 대체키, 슈퍼키
	- 테이블에서 사용 : 기본키, 외래키, 조합키

5) 키의 종류
- 기본키(Primary Key)
	테이블 내의 각 행을 고유하게 식별하는 데 사용
	중복 허용 X, NULL 값 허용 X

- 외래키(Foreign Key)
	외래키를 사용하여 두 테이블간의 관계를 설정하고 데이터 무결성을 유지

- 조합키(복합키)
	두 개이상의 컬럼의 하나의 KEY로 지정하는 것
	모든 테이블은 하나의 PK만 존재하지만 조합키를 사용하여 두 개 이상의 컬럼을 하나의 PK로 사용할 수 있다

- 후보키(Candidate Key)
	기본키가 될 수 있는 값(기본키의 후보)

- 대체키(Alternate Key)
	후보키에서 기본키로 선택되지 않은 후보키들

- 슈퍼키(Super Key)
	레코드를 고유하게 식별하기 위한 속성 또는 속성의 조합
	슈퍼키는 후보키와 대체키의 상위 개념

6) 제약조건
- PRIMARY KEY(PK)
	고유한 값이며 각 행의 구분점으로 사용한다
	중복이 없고 NULL값 허용하지 않는다

- FOREIGN KEY(FK)
	다른 테이블의 PK를 사용하며 중복이 가능하다
	보통 테이블끼리 관계를 맺을 때 사용한다(참조 무결성)
	NULL 값 허용한다

- UNIQUE(UK)
	해당 컬럼에서 중복값이 없는 고유값으로 사용해야한다
	NULL 값 허용한다

- CHECK(CK)
	컬럼의 값이 특정 조건을 만족해야한다(값의 범위나 조건 사용)

- NOT NULL
	해당 컬럼의 값은 NULL값이 허용되지 않는다

- DEFAULT
	해당 컬럼의 값이 입력되지 않을 경우, 기본값으로 자동 입력된다
	지정하지 않을경우 NULL 자동 사용된다

3. 모델링(기획)
	요구사항분석 -> 개념적 설계(개념모델링) -> 논리적 설계(논리 모델링) -> 물리적 설계(물리모델링) -> 구현

1) 요구사항 분석
	클라이언트 => 사업하는데 회원이 늘어났다. 
			회원, 상품, 주문 3가지를 관리하고 싶다

	회원	아이디, 비밀번호, 이름, 주소, 이메일주소, 생일
	상품	상품번호, 상품명, 가격, 재고량
	주문	주문번호, 주문날짜, 아이디, 상품번호

2) 개념적 설계(개념 모델링)
	회원		주문		상품
	아이디		주문번호		상품번호
	비밀번호		주문날짜		상품명
	이름		아이디		가격
	주소		상품번호		재고량
	이메일주소
	생일

3) 논리적 설계(논리 모델링)
	회원		주문		상품
	아이디(PK)	주문번호(PK)	상품번호(PK)
	비밀번호		주문날짜		상품명
	이름		아이디(FK)	가격
	주소		상품번호(FK)	재고량
	이메일주소(UK)
	생일

4) 물리적 설계(물리 모델링)
	회원	TBL_USER
	USER_ID	VARCHAR2(1000) : PRIMARY KEY
	---------------------------------------
	USER_PW VARCHAR2(1000) : NOT NULL
	USER_NAME VARCHAR2(100) : NOT NULL
	USER_ADDRESS VARCHAR2(1000) : NOT NULL
	USER_EMAIL VARCHAR2(100) : UNIQUE
	USER_BIRTH DATE

5) 구현


---------------------------------------------------------------------
+) 모델링 연습
1. 요구사항 분석
	핸드폰과 핸드폰 케이스를 판매한다
	핸드폰을 구매하면 핸드폰 케이스도 같이 구매한다
	핸드폰은 제품번호, 색상, 사이즈, 가격, 제조일, 할인율
	핸드폰케이스는 제품번호, 색상, 가격
	핸드폰은 특정 케이스만 같이 구입할 수 있다


2. 개념적설계(개념모델링)
	엔티티 도출 => 폰, 케이스
	엔티티의 속성

	폰		케이스
	폰 제품번호	케이스 제품번호
	색상		색상
	사이즈		가격
	가격
	제조일
	할인율

3. 논리적설계(논리모델링)
	데이터의 속성 정의
	키 정의

	폰				
	폰 제품번호(PK)	정수
	색상	N/N	문자열
	사이즈	N/N	문자열
	가격	N/N	정수
	제조일	N/N	날짜
	할인율		정수

	케이스
	케이스 제품번호(PK)	정수
	색상	N/N	문자열
	가격	N/N	정수
	
4. 물리적설계(물리모델링)
	테이블명, 컬럼명, 제약조건

	TBL_PHONE
	PHONE_NUMBER : NUMBER	 PK
 	PHONE_COLOR : VARCHAR2
	...

	TBL_CASE
	CASE_NUMBER : NUMBER	PK
	CASE_COLOR : VARCHAR2
	PHONE_NUMBER : NUMBER	FK

5. 구현

-----------------------------------------------------------------------------
+) 실습
1. 요구사항 분석
	도서관에서 회원의 정보와 책의 정보가 필요하다
	회원의 정보는 회원번호, 이름, 나이, 핸드폰번호, 주소가 필요하고 책의 정보는 도서번호, 책이름, 장르가 필요하다
	장르는 인문학, IT, 추리 3개뿐이다
	한명의 회원은 여러권의 책을 빌릴 수 있다


회원테이블 부모 PK		도서 테이블의 자식 FK
1			1		1
2			2		1
3			3		1



책이 부모테이블PK		회원테이블 자식 FK
1			1	     1, 2
2			2
3			3	


1. 개념모델링
	엔티티 : 회원, 책

	회원		책
	회원번호		도서번호
	이름		책이름
	나이		장르
	핸드폰번호
	주소

2. 논리모델링
	키, 속성의 타입
	
	회원			책
	회원번호(PK) 정수		도서번호(PK)	정수
	이름	문자열		책이름		문자열
	나이	정수		장르(CHECK)	문자열
	핸드폰번호	문자열		회원번호(FK)	정수
	주소	문자열

3. 물리모델링
	테이블명, 컬럼명, 타입, 제약조건

	TBL_MEMBER
	MEMBER_NUMBER NUMBER : PRIMARY KEY
	--------------------------------------
	MEMBER_NAME	VARCHAR2(100) : N/N
	MEMBER_AGE	NUMBER
	MEMBER_PHONE	VARCHAR2(15) : N/N
	MEMBER_ADDRESS VARCHAR2(100) : N/N	

-----------------------------------------------------------------------------
4. 정규화
- 데이터베이스에 정규화가 필요한 이유
	데이터베이스를 잘못 설계하면 불필요한 데이터 중복으로 인해 공간이 낭비된다
	이러한 현상을 이상(Anomaly)현상이라고 한다

1) 이상현상
	데이터베이스의 설계가 잘못되어 발생하는 문제

	직원
	===================================================================
	사원번호(pk)	이름	생년월일		부서정보			급여
	1		홍길동	2010-12-11	영업부, 서울시..01234	300
	2		강감찬	2011-02-04	개발부, 서울시..02322	240
	3		신짱구	2018-01-04	보안부, 서울시..01111	230
	4		신짱아	2009-05-09	영업부, 서울시..05555	220

(1) 삽입이상
	새로운 데이터를 삽입하기 위해 불필요한 데이터도 삽입해야하는 문제
	새로운 사원을 등록할 때 부서명, 주소, 우편번호를 같이 입력해야한다
	
(2) 갱신이상
	중복행 중에서 일부만 변경하여 데이터가 불일치하게 되는 모순의 문제
	부서의 주소가 변경되었을 때 해당하는 부서의 모든 사원데이터를 수정해야한다

(3) 삭제이상
	행을 삭제했을 때 필요한 데이터도 같이 삭제되는 문제
	부서정보를 삭제할 때 사원의 정보도 같이 삭제하게 된다

2) 정규화(Normaliztion)
	데이터의 중복을 최소화하고(독립성), 데이터의 무결성을 향상시키는 방법
	이상현상을 제거하기 위한 작업
	6차 정규화까지 있으나 일반적으로 3차 정규화까지만 진행한다(과도한 정규화는 데이터를 조회할 때 복잡해짐)
	
	기존테이블_직원
	===================================================================
	사원번호(pk)	이름	생년월일		부서정보			급여
	1		홍길동	2010-12-11	영업부, 서울시..01234	300
	2		강감찬	2011-02-04	개발부, 서울시..02322	240
	3		신짱구	2018-01-04	보안부, 서울시..01111	230
	4		신짱아	2009-05-09	영업부, 서울시..05555	220


- 1차 정규화 : 모든 컬럼은 고유한 값을 가지고 모든 행은 고유한 식별자(PK)를 가진다
	부서정보의 컬럼은 하나의 값이 아닌 여러개의 값(다중값)을 사용한다 
	=> 하나의 컬럼이 하나의 값을 가질수있도록 컬럼을 분리한다
	
	1차정규화_직원 pk : 사원번호, 부서번호
	===================================================================
	사원번호(pk)	이름	생년월일		부서번호(pk)	부서명	주소	우편번호	급여
	1		홍길동	2010-12-11	1		영업부	서울시.. 01234	300
	2		강감찬	2011-02-04	2		개발부 	서울시.. 02322	240
	3		신짱구	2018-01-04	3		보안부 	서울시.. 01111	230
	4		신짱아	2009-05-09	1		영업부 	서울시.. 05555	220

- 2차 정규화 : 컬럼은 기본키 전체에 종속되어야한다, 조합키로 기본키를 사용할 경우 조합키의 일부분에만 종속되는 속성이 없어야한다	
	부서번호만 알아도 부서명, 주소, 우편번호를 알 수 있다
	=> 사원테이블의 조합키 PK를 사원번호 하나로 지정하고 직원테이블과 부서테이블을 분리한다
		부서테이블의 부서번호를 PK로 지정하고 직원테이블의 외래키로 지정한다
	
	2차정규화_부서테이블
	===================================================================
	부서번호(pk)	부서명	주소	우편번호
	1		영업부	서울시..	01234
	2		개발부	서울시..	02322
	3		보안부	서울시	01111

	2차정규화_사원테이블
	===================================================================
	사원번호(pk)	이름	생년월일		부서번호(FK)	급여
	1		홍길동	2010-12-11	1		300
	2		강감찬	2011-02-04	2		240
	3		신짱구	2018-01-04	3		230
	4		신짱아	2009-05-09	1		220

- 3차 정규화 : 기본키가 아닌 컬럼이 다른 컬럼을 결정하는 경우(기본키가 아닌 컬럼에 종속적인 경우)
	부서 테이블에서 우편번호만 알아도 부서의 주소를 알 수 있다
	=> 부서와 부서 주소 테이블로 분리한다
	=> 부서주소테이블의 주소번호(pk)를 부서 테이블의 fk로 지정한다

	3차정규화_부서주소테이블
	===============================
	주소번호(pk)	주소		우편번호
	1		서울시 강남구	01234
	2		서울시 서초구 3층	02222
	3		서울시 송파구 5층	05252


	3차정규화_부서테이블
	===============================
	부서번호(pk)	부서명	주소번호(fk)
	1		영업부	1
	2		개발부	2
	3		보안부	3

	3차정규화_사원테이블
	===================================================================
	사원번호(pk)	이름	생년월일		부서번호(FK)	급여
	1		홍길동	2010-12-11	1		300
	2		강감찬	2011-02-04	2		240
	3		신짱구	2018-01-04	3		230
	4		신짱아	2009-05-09	1		220
	5		철수	2009-05-10	2		
	
최종테이블
	직원		부서		부서주소
	=======================================
	사원번호(PK)	부서번호(PK)	주소번호(PK)
	이름		부서명		주소
	생년월일		주소번호(FK)	우편번호
	부서번호(FK)
	급여

5. 시퀀스(SEQUENCE)
	오라클에서 중복되지 않는 값을 자동으로 순차적으로 생성하는 것
	일반적으로 PK값에 중복값을 방지하기 위해 생성하여 사용한다

1) 시퀀스 생성
	CREATE SEQUENCE 시퀀스명;
	START WITH 시작숫자
	INCERMENT BY 증감숫자
	일반적으로는 옵션을 주지않고 생성하여 사용한다

2) 시퀀스 삭제
	증가된 시퀀스를 감소시킬 수 없기 때문에 잘못된 값으로 증가시켰을 경우에는 삭제 후 다시 생성하여 사용한다
	DROP SEQUENCE 시퀀스명;

3) 시퀀스 사용
	현재 시퀀스 값 :시퀀스명.CURRVAL
	다음 시퀀스 값 :시퀀스명.NEXTVAL
	- 시퀀스 생성후 NEXTVAL를 1회 호출해야 CURRVAL를 통해 현재 시퀀스 값을 확인할 수 있다





















